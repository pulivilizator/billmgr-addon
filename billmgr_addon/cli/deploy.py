# -*- coding: utf-8 -*-

"""
–ö–æ–º–∞–Ω–¥—ã –¥–µ–ø–ª–æ—è –ø–ª–∞–≥–∏–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

import glob
import subprocess
from pathlib import Path

import click
import tomlkit

from ..utils.files import create_plugin_symlinks, get_mgr_paths, unregister_processing_module
from ..utils.xml_builder import XMLBuilder


@click.group()
def deploy():
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è –ø–ª–∞–≥–∏–Ω–∞"""
    pass


@deploy.command()
@click.option("--plugin-name", required=True, help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞")
@click.option("--force", is_flag=True, help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
@click.option(
    "--xml-path",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ xml (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ./xml)",
)
@click.option(
    "--server-app-folder",
    help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)",
)
@click.option(
    "--update-xml-cache/--no-update-xml-cache",
    default=True,
    help="–û–±–Ω–æ–≤–∏—Ç—å XML –∫—ç—à –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
)
@click.option(
    "--install-processing-module/--no-install-processing-module",
    default=True,
    help="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏ processing module script (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞, –µ—Å–ª–∏ processing_module_cli.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
)
def install(plugin_name, force, xml_path, server_app_folder, update_xml_cache, install_processing_module):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω –≤ BILLmanager"""
    try:
        click.echo(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}...")

        if not server_app_folder and not Path("cgi.py").exists():
            raise click.ClickException("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞")

        if not server_app_folder:
            if xml_path:
                click.echo(f"–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {xml_path}...")
                src_path = xml_path / "src"
                build_path = xml_path / "build.xml"

                if not src_path.exists():
                    raise click.ClickException(f"–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {xml_path}")
            else:
                click.echo("–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
                src_path = None
                build_path = None

            builder = XMLBuilder(src_path=src_path, build_path=build_path)
            builder.build()

        click.echo("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫...")
        links = create_plugin_symlinks(plugin_name, server_app_folder, install_processing_module)

        for link_type, link_path in links.items():
            click.echo(f"  {link_type}: {link_path}")

        if server_app_folder and update_xml_cache:
            click.echo("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ XML –∫—ç—à–∞...")

            meta_cache_result = subprocess.run(
                ["/usr/local/mgr5/sbin/xmlinstall", "-m", "billmgr", "--meta-cache", "--apply"],
                capture_output=True,
                text=True,
            )
            if meta_cache_result.returncode != 0:
                click.echo(
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞-–∫—ç—à–∞: {meta_cache_result.stderr}"
                )

            lang_cache_result = subprocess.run(
                [
                    "/usr/local/mgr5/sbin/xmlinstall",
                    "-m",
                    "billmgr",
                    "--lang-cache",
                    "ru",
                    "--base",
                    "en",
                    "--apply",
                ],
                capture_output=True,
                text=True,
            )
            if lang_cache_result.returncode != 0:
                click.echo(
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ –∫—ç—à–∞: {lang_cache_result.stderr}"
                )
            else:
                click.echo("  ‚úÖ XML –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω")

        if not server_app_folder:
            click.echo("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ BILLmanager...")
            reload_result = subprocess.run(
                ["systemctl", "reload", "billmgr"], capture_output=True, text=True
            )
            if reload_result.returncode != 0:
                click.echo(
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å BILLmanager: {reload_result.stderr}"
                )

        click.echo(f"–ü–ª–∞–≥–∏–Ω {plugin_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        raise click.ClickException(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")


@deploy.command()
@click.option("--plugin-name", required=True, help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞")
def uninstall(plugin_name):
    """–£–¥–∞–ª–∏—Ç—å –ø–ª–∞–≥–∏–Ω"""
    try:
        click.echo(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}...")

        mgr_paths = get_mgr_paths()

        links_to_remove = [
            mgr_paths["mgr_plugin_handlers_path"] / plugin_name,
            mgr_paths["mgr_cgi_handlers_path"] / plugin_name,
            mgr_paths["mgr_xml_path"] / f"billmgr_mod_{plugin_name}.xml",
            mgr_paths["mgr_processing_path"] / f"pm{plugin_name}",
            mgr_paths["mgr_xml_path"] / f"billmgr_mod_pm{plugin_name}.xml",
        ]

        for link_path in links_to_remove:
            if link_path.exists():
                if link_path.is_symlink():
                    link_path.unlink()
                    click.echo(f"  –£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {link_path}")
                else:
                    link_path.unlink()
                    click.echo(f"  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {link_path}")

        if unregister_processing_module(plugin_name):
            click.echo(f"  Processing module pm{plugin_name} –æ—Ç–º–µ–Ω–µ–Ω")
        else:
            click.echo(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é processing module pm{plugin_name}")

        click.echo("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ BILLmanager...")
        restart_cmd = f"/usr/local/mgr5/sbin/mgrctl -m billmgr exit"
        reload_result = subprocess.run(restart_cmd, capture_output=True, text=True)
        if reload_result.returncode != 0:
            click.echo(
                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å BILLmanager: {reload_result.stderr}"
            )

        click.echo(f"–ü–ª–∞–≥–∏–Ω {plugin_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")

    except Exception as e:
        raise click.ClickException(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞: {e}")


@deploy.command()
@click.option("--plugin-name", required=True, help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞")
def status(plugin_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞(–¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)"""
    try:
        mgr_paths = get_mgr_paths()

        links_to_check = {
            "Addon handler": mgr_paths["mgr_plugin_handlers_path"] / plugin_name,
            "CGI handler": mgr_paths["mgr_cgi_handlers_path"] / plugin_name,
            "XML config": mgr_paths["mgr_xml_path"] / f"billmgr_mod_{plugin_name}.xml",
            "Processing module": mgr_paths["mgr_processing_path"] / f"pm{plugin_name}",
        }

        click.echo(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}:")

        all_exist = True
        for name, path in links_to_check.items():
            exists = path.exists()
            status_icon = "‚úì" if exists else "‚úó"
            click.echo(f"  {status_icon} {name}: {path}")
            if not exists:
                all_exist = False

        if all_exist:
            click.echo("–ü–ª–∞–≥–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            click.echo("–ü–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")

    except Exception as e:
        raise click.ClickException(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")


@deploy.command()
@click.option(
    "--xml-path",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ xml (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ./xml)",
)
def build_xml(xml_path):
    """–°–æ–±—Ä–∞—Ç—å XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        if xml_path:
            click.echo(f"–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {xml_path}...")
        else:
            click.echo("–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        from ..utils.xml_builder import XMLBuilder

        if xml_path:
            src_path = xml_path / "src"
            build_path = xml_path / "build.xml"

            if not src_path.exists():
                raise click.ClickException(f"–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {xml_path}")
        else:
            src_path = None
            build_path = None

        builder = XMLBuilder(src_path=src_path, build_path=build_path)
        output_path = builder.build()
        click.echo(f"XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞: {output_path}")

    except Exception as e:
        raise click.ClickException(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ XML: {e}")


@deploy.command()
@click.option("--environment", "-e", required=True, help="–û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è (dev, prod)")
@click.option("--plugin-name", required=True, help="–ò–º—è –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
@click.option("--config", "-c", default="deploy.toml", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è")
@click.option("--backup/--no-backup", default=True, help="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
@click.option("--install/--no-install", default=True, help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è")
@click.option(
    "--restart-billmgr/--no-restart-billmgr",
    default=False,
    help="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å BILLmanager –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è",
)
@click.option("--dry-run", is_flag=True, help="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
@click.option(
    "--xml-path",
    type=click.Path(exists=True, file_okay=False, path_type=Path),
    help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ xml (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ./xml)",
)
@click.option(
    "--install-processing-module/--no-install-processing-module",
    default=True,
    help="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏ processing module script (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞, –µ—Å–ª–∏ processing_module_cli.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
)
def remote_deploy(
    environment, plugin_name, config, backup, install, restart_billmgr, dry_run, xml_path, install_processing_module
):
    """–î–µ–ø–ª–æ–π –ø–ª–∞–≥–∏–Ω–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"""
    try:
        click.echo(f"–£–¥–∞–ª–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ '{environment}'")

        if not Path("cgi.py").exists():
            raise click.ClickException("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞")

        config_path = Path(config)
        if not config_path.exists():
            raise click.ClickException(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{config}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            with open(config_path, "r", encoding="utf-8") as f:
                deploy_config = tomlkit.load(f).unwrap()
        except Exception as e:
            raise click.ClickException(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

        if environment not in deploy_config:
            raise click.ClickException(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ '{environment}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        env_config = deploy_config[environment]
        required_fields = ["server", "app_folder"]
        missing_fields = [field for field in required_fields if field not in env_config]
        if missing_fields:
            raise click.ClickException(
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {missing_fields}"
            )

        server = env_config["server"]
        app_folder = env_config["app_folder"]
        ssh_options = env_config.get("ssh_options", "-A")

        click.echo(f"–°–µ—Ä–≤–µ—Ä: {server}")
        click.echo(f"–ü–∞–ø–∫–∞: {app_folder}")

        if dry_run:
            click.echo("–†–µ–∂–∏–º dry-run: –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

        click.echo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        check_cmd = f"ssh {ssh_options} {server} 'test -d {app_folder}'"
        if dry_run:
            click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {check_cmd}")
        else:
            result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                raise click.ClickException(f"–ü–∞–ø–∫–∞ {app_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server}")

        if backup:
            click.echo("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
            backup_cmd = f"""ssh {ssh_options} {server} "cd {app_folder} && \\
                tar -zcf backup.tar.gz \\
                    --exclude='venv' --exclude='*.pyc' --exclude='__pycache__' \\
                    app public xml *.py *.toml requirements.txt README.md 2>/dev/null || true" """

            if dry_run:
                click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {backup_cmd}")
            else:
                result = subprocess.run(backup_cmd, shell=True)
                if result.returncode == 0:
                    click.echo("–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backup.tar.gz")
                else:
                    click.echo("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")

        click.echo("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        cleanup_cmd = f"""ssh {ssh_options} {server} "cd {app_folder} && \\
            find app -mindepth 1 -delete 2>/dev/null || true && \\
            find public -mindepth 1 -delete 2>/dev/null || true && \\
            find xml -mindepth 1 -delete 2>/dev/null || true" """

        if dry_run:
            click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {cleanup_cmd}")
        else:
            subprocess.run(cleanup_cmd, shell=True)

        if xml_path:
            click.echo(f"–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {xml_path}...")
        else:
            click.echo("–°–±–æ—Ä–∫–∞ XML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        if not dry_run:
            if xml_path:
                src_path = xml_path / "src"
                build_path = xml_path / "build.xml"

                if not src_path.exists():
                    raise click.ClickException(f"–ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {xml_path}")
            else:
                src_path = None
                build_path = None

            builder = XMLBuilder(src_path=src_path, build_path=build_path)
            builder.build()

        click.echo("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")

        files_to_sync = []

        for dir_name in ["app", "public", "xml"]:
            if Path(dir_name).exists():
                files_to_sync.append(dir_name)

        for pattern in ["*.py", "*.toml"]:
            files_to_sync.extend(glob.glob(pattern))

        for file_name in [
            "requirements.txt",
            "README.md",
            "cgi.py",
            "settings.py",
            "build_xml.py",
            "cli.py",
            "processing_module_cli.py",
        ]:
            if Path(file_name).exists():
                files_to_sync.append(file_name)

        if not files_to_sync:
            raise click.ClickException("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        exclude_patterns = [
            "--exclude=*.pyc",
            "--exclude=__pycache__",
            "--exclude=.git",
            "--exclude=.idea",
            "--exclude=.vscode",
            "--exclude=.mypy_cache",
            "--exclude=xml/src",
            "--exclude=venv",
        ]

        rsync_cmd = (
            ["rsync", "-rltz"] + exclude_patterns + files_to_sync + [f"{server}:{app_folder}"]
        )

        if dry_run:
            click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {' '.join(rsync_cmd)}")
        else:
            result = subprocess.run(rsync_cmd)
            if result.returncode != 0:
                raise click.ClickException("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
            click.echo("  –§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        click.echo("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        venv_cmd = f"""ssh {ssh_options} {server} "cd {app_folder} && \\
            python3.8 -m venv venv" """

        if dry_run:
            click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {venv_cmd}")
        else:
            result = subprocess.run(venv_cmd, shell=True)
            if result.returncode == 0:
                click.echo("  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            else:
                click.echo("  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        click.echo("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        deps_cmd = f"""ssh {ssh_options} {server} "cd {app_folder} && \\
            source venv/bin/activate && \\
            pip install -r requirements.txt" """

        if dry_run:
            click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {deps_cmd}")
        else:
            result = subprocess.run(deps_cmd, shell=True)
            if result.returncode == 0:
                click.echo("  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                click.echo("  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

        if install:
            click.echo("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ processing module –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
            processing_module_flag = "--install-processing-module" if install_processing_module else "--no-install-processing-module"
            
            install_cmd = f"""ssh {ssh_options} {server} "cd {app_folder} && \\
                source venv/bin/activate && \\
                billmgr-addon deploy install --plugin-name {plugin_name} --server-app-folder {app_folder} {processing_module_flag}" """

            if dry_run:
                click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {install_cmd}")
            else:
                result = subprocess.run(install_cmd, shell=True)
                if result.returncode == 0:
                    click.echo("  –ü–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    click.echo("  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞")

        if restart_billmgr or install:
            click.echo("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ BILLmanager...")
            restart_cmd = (
                f"ssh {ssh_options} {server} '/usr/local/mgr5/sbin/mgrctl -m billmgr exit'"
            )

            if dry_run:
                click.echo(f"  –ö–æ–º–∞–Ω–¥–∞: {restart_cmd}")
            else:
                result = subprocess.run(restart_cmd, shell=True)
                if result.returncode == 0:
                    click.echo("  BILLmanager –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                else:
                    click.echo("  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ BILLmanager")

        click.echo("–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        if not install:
            click.echo("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            processing_module_flag = "--install-processing-module" if install_processing_module else "--no-install-processing-module"
            click.echo(
                f"   ssh {server} 'cd {app_folder} && source venv/bin/activate && sudo billmgr-addon deploy install --plugin-name {plugin_name} --server-app-folder {app_folder} {processing_module_flag}'"
            )

        if not restart_billmgr:
            click.echo("–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ BILLmanager –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            click.echo(f"   ssh {server} 'systemctl restart billmgr'")

    except Exception as e:
        raise click.ClickException(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = ["deploy"]
