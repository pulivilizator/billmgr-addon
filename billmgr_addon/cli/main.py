# -*- coding: utf-8 -*-

import click
import os
import sys
from pathlib import Path

from ..scaffold import ProjectScaffold
from ..utils.files import create_plugin_symlinks, create_processing_module_symlinks
from .deploy import deploy as deploy_commands


@click.group()
@click.version_option()
def main():
    """BILLmanager Addon Framework CLI"""
    pass


@main.command()
@click.argument('project_name')
@click.option('--path', default='.', help='–ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞')
@click.option('--template', default='basic', help='–®–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞')
def create_project(project_name: str, path: str, template: str):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø–ª–∞–≥–∏–Ω–∞"""
    click.echo(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' –≤ '{path}'...")
    
    project_path = Path(path) / project_name
    scaffold = ProjectScaffold(project_name, project_path, template)
    
    try:
        scaffold.create()
        click.echo(f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        click.echo(f"üìÅ –ü—É—Ç—å: {project_path.absolute()}")
        click.echo()
        
        plugin_name_norm = project_name.lower().replace('-', '_')

        click.echo("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        click.echo(f"  cd {project_name}")
        click.echo("  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.toml")
        click.echo(f"  sudo billmgr-addon deploy install --plugin-name {plugin_name_norm}")
        click.echo()
        click.echo("–î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è:")
        click.echo("  # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å deploy.toml (–ø—Ä–∏–º–µ—Ä –≤ deploy.example.toml)")
        click.echo(f"  billmgr-addon deploy remote-deploy -e dev --plugin-name {plugin_name_norm}")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        raise click.Abort()


@main.command()
@click.option('--plugin-name', required=True, help='–ò–º—è –ø–ª–∞–≥–∏–Ω–∞')
def install(plugin_name: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω –≤ BILLmanager"""
    click.echo(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' –≤ BILLmanager...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        mgr_path = Path("/usr/local/mgr5")
        if not mgr_path.exists():
            raise click.ClickException("BILLmanager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        if not os.access(mgr_path, os.W_OK):
            raise click.ClickException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo.")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏
        links = create_plugin_symlinks(plugin_name)
        
        click.echo("‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        for link_type, link_path in links.items():
            click.echo(f"  {link_type}: {link_path}")
        
        click.echo()
        click.echo("–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        click.echo("  systemctl restart billmgr")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        raise click.Abort()


@main.command()
@click.option('--module-name', required=True, help='–ò–º—è –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
def install_processing_module(module_name: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ BILLmanager"""
    click.echo(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{module_name}' –≤ BILLmanager...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        mgr_path = Path("/usr/local/mgr5")
        if not mgr_path.exists():
            raise click.ClickException("BILLmanager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        if not os.access(mgr_path, os.W_OK):
            raise click.ClickException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo.")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏
        links = create_processing_module_symlinks(module_name)
        
        click.echo("‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        for link_type, link_path in links.items():
            click.echo(f"  {link_type}: {link_path}")
        
        click.echo()
        click.echo("–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        click.echo("  systemctl restart billmgr")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        raise click.Abort()


@main.command()
def build_xml():
    """–°–æ–±—Ä–∞—Ç—å XML —Ñ–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞"""
    from ..utils.xml_builder import XMLBuilder
    
    click.echo("–°–±–æ—Ä–∫–∞ XML —Ñ–∞–π–ª–æ–≤...")
    
    try:
        builder = XMLBuilder()
        output_path = builder.build()
        click.echo(f"‚úÖ XML —Å–æ–±—Ä–∞–Ω: {output_path}")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ XML: {e}")
        raise click.Abort()


# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥ –¥–µ–ø–ª–æ—è
main.add_command(deploy_commands)


if __name__ == '__main__':
    main() 